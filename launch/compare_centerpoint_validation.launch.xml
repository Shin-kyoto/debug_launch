<launch>
  <arg name="map_path" description="point cloud and lanelet2 map directory path"/>
  <arg name="vehicle_model" description="vehicle model name"/>
  <arg name="sensor_model" description="sensor model name"/>
  <arg name="vehicle_id" default="$(env VEHICLE_ID default)" description="vehicle specific ID"/>
  <arg name="api" default="false" description="launch api" />
  <arg name="vehicle" default="true" description="launch vehicle" />
  <arg name="system" default="false" description="launch system" />
  <arg name="map" default="true" description="launch map" />
  <arg name="sensing" default="true" description="launch sensing" />
  <arg name="localization" default="false" description="launch localization" />
  <arg name="perception" default="false" description="launch perception" />
  <arg name="planning" default="false" description="launch planning" />
  <arg name="control" default="false" description="launch control" />
  <arg name="scenario_simulation" default="true" description="scenario simulation" />
  <arg name="rviz_config_raw_centerpoint" default="$(find-pkg-share debug_launch)/config/rviz/compare_centerpoint_validation_raw.rviz" description="rviz config for raw_centerpoint"/>
  <arg name="rviz_config_validated_centerpoint" default="$(find-pkg-share debug_launch)/config/rviz/compare_centerpoint_validation_validated.rviz" description="rviz config for validated centerpoint"/>
  <arg name="input/pointcloud" default="/sensing/lidar/top/outlier_filtered/pointcloud" description="The topic will be used in the detection module"/>
  <arg name="mode" default="camera_lidar_fusion" description="options: `camera_lidar_radar_fusion`, `camera_lidar_fusion`, `lidar_radar_fusion`, `lidar` or `radar`"/>
  <arg name="vehicle_param_file" default="$(find-pkg-share vehicle_info_util)/config/vehicle_info.param.yaml" description="path to the file of vehicle info yaml"/>
  <arg name="lidar_detection_model" default="centerpoint" description="options: `centerpoint`, `apollo`"/>
  <arg name="use_pointcloud_map" default="true" description="use pointcloud map in detection"/>
  <arg name="use_pointcloud_container" default="false" description="launch pointcloud container"/>
  <arg name="pointcloud_container_name" default="pointcloud_container"/>

  <include file="$(find-pkg-share autoware_launch)/launch/logging_simulator.launch.xml">
	<arg name="map_path" value="$(var map_path)"/>
	<arg name="vehicle_model" value="$(var vehicle_model)"/>
	<arg name="sensor_model" value="$(var sensor_model)"/>
	<arg name="vehicle_id" value="$(var vehicle_id)"/>
	<arg name="api" value="$(var api)"/>
	<arg name="vehicle" value="$(var vehicle)"/>
	<arg name="system" value="$(var system)"/>
	<arg name="map" value="$(var map)"/>
	<arg name="sensing" value="$(var sensing)"/>
	<arg name="localization" value="$(var localization)"/>
	<arg name="perception" value="$(var perception)"/>
	<arg name="planning" value="$(var planning)"/>
	<arg name="control" value="$(var control)"/>
	<arg name="scenario_simulation" value="$(var scenario_simulation)"/>
	<arg name="rviz" value="false"/>
  </include>

  <!-- partially launch perception -->
  <group>
    <push-ros-namespace namespace="perception"/>
    <!-- object segmentation module -->
    <group>
      <push-ros-namespace namespace="obstacle_segmentation"/>
      <include file="$(find-pkg-share perception_launch)/launch/obstacle_segmentation/ground_segmentation/ground_segmentation.launch.py">
        <arg name="base_frame" value="base_link" />
        <arg name="use_intra_process" value="true" />
        <arg name="use_multithread" value="true" />
        <arg name="use_pointcloud_container" value="$(var use_pointcloud_container)" />
        <arg name="container_name" value="$(var pointcloud_container_name)"/>
        <arg name="input/pointcloud" value="$(var input/pointcloud)"/>
        <arg name="vehicle_param_file" value="$(var vehicle_param_file)"/>
      </include>
    </group>
    <!-- occupancy grid map module -->
    <group>
      <push-ros-namespace namespace="occupancy_grid_map"/>
      <include file="$(find-pkg-share perception_launch)/launch/occupancy_grid_map/pointcloud_based_occupancy_grid_map.launch.py">
        <arg name="input/obstacle_pointcloud" value="/perception/obstacle_segmentation/single_frame/pointcloud_raw" />
        <arg name="input/raw_pointcloud" value="$(var input/pointcloud)" />
        <arg name="output" value="/perception/occupancy_grid_map/map" />
        <arg name="use_intra_process" value="true" />
        <arg name="use_multithread" value="true" />
        <arg name="use_pointcloud_container" value="$(var use_pointcloud_container)" />
        <arg name="container_name" value="$(var pointcloud_container_name)"/>
      </include>
    </group>
  </group>
  
  <node pkg="rviz2" exec="rviz2" name="rviz2_raw_centerpoint" output="screen" args="-d $(var rviz_config_raw_centerpoint)"/>
  <node pkg="rviz2" exec="rviz2" name="rviz2_validated_centerpoint" output="screen" args="-d $(var rviz_config_validated_centerpoint)"/>
  
  <node pkg="image_transport_decompressor" exec="image_transport_decompressor_node" name="image_decompressor_node">
	<remap from="~/input/compressed_image" to="/sensing/camera/traffic_light/image_raw/compressed"/>
	<remap from="~/output/raw_image" to="/sensing/camera/image"/>
  </node>
  
</launch>
