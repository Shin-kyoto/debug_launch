<launch>
  <arg name="map_path" description="point cloud and lanelet2 map directory path"/>
  <arg name="vehicle_model" description="vehicle model name"/>
  <arg name="sensor_model" description="sensor model name"/>
  <arg name="vehicle_id" default="$(env VEHICLE_ID default)" description="vehicle specific ID"/>
  <arg name="api" default="false" description="launch api"/>
  <arg name="vehicle" default="true" description="launch vehicle"/>
  <arg name="system" default="false" description="launch system"/>
  <arg name="map" default="true" description="launch map"/>
  <arg name="sensing" default="true" description="launch sensing"/>
  <!-- until accceleration is added to backpicker -->
  <arg name="localization" default="false" description="launch localization"/>
  <!-- launch obstacle_segmentation and occupancy_grid manually, so disable perception stack -->
  <arg name="perception" default="false" description="launch perception"/>
  <arg name="planning" default="false" description="launch planning" />
  <arg name="scenario_simulation" default="true" description="scenario simulation" />
  <arg name="rviz_config" default="$(find-pkg-share debug_launch)/config/rviz/reeval_planning.rviz" description="rviz config"/>
  <arg name="input/pointcloud" default="/sensing/lidar/top/outlier_filtered/pointcloud" description="The topic will be used in the detection module"/>
  <arg name="mode" default="camera_lidar_fusion" description="options: `camera_lidar_radar_fusion`, `camera_lidar_fusion`, `lidar_radar_fusion`, `lidar` or `radar`"/>
  <arg name="vehicle_param_file" default="$(find-pkg-share vehicle_info_util)/config/vehicle_info.param.yaml" description="path to the file of vehicle info yaml"/>
  <arg name="lidar_detection_model" default="centerpoint" description="options: `centerpoint`, `apollo`"/>
  <arg name="use_pointcloud_map" default="true" description="use pointcloud map in detection"/>
  <arg name="use_pointcloud_container" default="false" description="launch pointcloud container"/>
  <arg name="pointcloud_container_name" default="pointcloud_container"/>
  <arg name="occupancy_grid_map_method" default="pointcloud_based_occupancy_grid_map" description="options: pointcloud_based_occupancy_grid_map, laserscan_based_occupancy_grid_map"/>
  <arg name="use_foa" default="false"/>
  <let
    name="rtc_auto_mode_manager_param_path"
    value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/lane_driving/behavior_planning/rtc_auto_mode_manager/rtc_auto_mode_manager.param.yaml"
    unless="$(var use_foa)"
  />
  <let
    name="rtc_auto_mode_manager_param_path"
    value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/lane_driving/behavior_planning/rtc_auto_mode_manager/rtc_auto_mode_manager_foa.param.yaml"
    if="$(var use_foa)"
  />
  <let
    name="rtc_auto_mode_manager_param_path"
    value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/lane_driving/behavior_planning/rtc_auto_mode_manager/rtc_auto_mode_manager_sim.param.yaml"
    if="$(var scenario_simulation)"
  />

  <include file="$(find-pkg-share autoware_launch)/launch/logging_simulator.launch.xml">
	<arg name="map_path" value="$(var map_path)"/>
	<arg name="vehicle_model" value="$(var vehicle_model)"/>
	<arg name="sensor_model" value="$(var sensor_model)"/>
	<arg name="vehicle_id" value="$(var vehicle_id)"/>
	<arg name="api" value="$(var api)"/>
	<arg name="vehicle" value="$(var vehicle)"/>
	<arg name="system" value="$(var system)"/>
	<arg name="map" value="$(var map)"/>
	<arg name="sensing" value="$(var sensing)"/>
	<arg name="localization" value="$(var localization)"/>
	<arg name="perception" value="$(var perception)"/>
	<arg name="planning" value="$(var planning)"/>
	<arg name="scenario_simulation" value="$(var scenario_simulation)"/>
	<arg name="rviz" value="false"/>
  </include>

  <!-- partially launch behavior_velocity -->
  <group>
    <push-ros-namespace namespace="planning/scenario_planning/lane_driving/behavior_planning"/>
	<include file="$(find-pkg-share debug_launch)/launch/behavior_velocity_planner.launch.py">
	  <arg name="vehicle_param_file" value="$(find-pkg-share $(var vehicle_model)_description)/config/vehicle_info.param.yaml"/>
	  <arg name="common_param_path" value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/common/common.param.yaml"/>
	  <arg name="nearest_search_param_path" value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/common/nearest_search.param.yaml"/>
	  <arg name="motion_velocity_smoother_param_path" value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/common/motion_velocity_smoother/motion_velocity_smoother.param.yaml"/>
	  <arg name="behavior_velocity_smoother_type_param_path" value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/common/motion_velocity_smoother/Analytical.param.yaml"/>
    <arg name="behavior_velocity_smoother_type_param_path" value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/common/motion_velocity_smoother/Analytical.param.yaml"/>
    <arg name="blind_spot_param_path" value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/blind_spot.param.yaml"/>
    <arg name="crosswalk_param_path" value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/crosswalk.param.yaml"/>
    <arg
      name="detection_area_param_path"
      value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/detection_area.param.yaml"
    />
    <arg name="intersection_param_path" value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/intersection.param.yaml"/>
    <arg name="stop_line_param_path" value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/stop_line.param.yaml"/>
    <arg name="traffic_light_param_path" value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/traffic_light.param.yaml"/>
    <arg
      name="virtual_traffic_light_param_path"
      value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/virtual_traffic_light.param.yaml"
    />
    <arg
      name="occlusion_spot_param_path"
      value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/occlusion_spot.param.yaml"
    />
    <arg
      name="no_stopping_area_param_path"
      value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/no_stopping_area.param.yaml"
    />
    <arg name="run_out_param_path" value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/run_out.param.yaml"/>
    <arg name="speed_bump_param_path" value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/speed_bump.param.yaml"/>
    <arg name="out_of_lane_param_path" value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/out_of_lane.param.yaml"/>
    <arg
      name="behavior_velocity_planner_param_path"
      value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/behavior_velocity_planner.param.yaml"
    />
	</include>
  </group>
  <group>
	<push-ros-namespace namespace="planning/scenario_planning/lane_driving"/>
    <include file="$(find-pkg-share rtc_auto_mode_manager)/launch/rtc_auto_mode_manager.launch.xml">
	  <arg name="param_path" value="$(var rtc_auto_mode_manager_param_path)"/>
    </include>
  </group>

  <!-- partially launch perception -->
  <group>
    <push-ros-namespace namespace="perception"/>
    <!-- object segmentation module -->
    <group>
      <push-ros-namespace namespace="obstacle_segmentation"/>
      <include file="$(find-pkg-share tier4_perception_launch)/launch/obstacle_segmentation/ground_segmentation/ground_segmentation.launch.py">
        <arg name="obstacle_segmentation_ground_segmentation_param_path" value="$(find-pkg-share autoware_launch)/config/perception/obstacle_segmentation/ground_segmentation/ground_segmentation.param.yaml"/>
        <arg name="base_frame" value="base_link" />
        <arg name="use_intra_process" value="true"/>
        <arg name="use_multithread" value="true"/>
        <arg name="use_pointcloud_container" value="$(var use_pointcloud_container)"/>
        <arg name="container_name" value="$(var pointcloud_container_name)"/>
        <arg name="input/pointcloud" value="$(var input/pointcloud)"/>
        <arg name="vehicle_param_file" value="$(var vehicle_param_file)"/>
      </include>
    </group>
    <!-- occupancy grid map module -->
    <group>
      <push-ros-namespace namespace="occupancy_grid_map"/>
      <include file="$(find-pkg-share tier4_perception_launch)/launch/occupancy_grid_map/probabilistic_occupancy_grid_map.launch.xml">
        <arg name="occupancy_grid_map_method" value="$(var occupancy_grid_map_method)"/>
        <arg name="occupancy_grid_map_param_path" value="$(find-pkg-share autoware_launch)/config/perception/occupancy_grid_map/$(var occupancy_grid_map_method).param.yaml"/>
        <arg name="occupancy_grid_map_updater" value="binary_bayes_filter"/>
        <arg name="occupancy_grid_map_updater_param_path" value="$(find-pkg-share autoware_launch)/config/perception/occupancy_grid_map/$(var occupancy_grid_map_updater)_updater.param.yaml"/>
        <arg name="input/obstacle_pointcloud" value="/perception/obstacle_segmentation/single_frame/pointcloud_raw"/>
        <arg name="input/raw_pointcloud" value="$(var input/pointcloud)"/>
        <arg name="output" value="/perception/occupancy_grid_map/map"/>
        <arg name="use_intra_process" value="true"/>
        <arg name="use_multithread" value="true"/>
        <arg name="use_pointcloud_container" value="$(var use_pointcloud_container)"/>
        <arg name="container_name" value="$(var pointcloud_container_name)"/>
      </include>
    </group>
  </group>

  <node pkg="rviz2" exec="rviz2" name="rviz2" output="screen" args="-d $(var rviz_config)"/>
  
  <node pkg="image_transport_decompressor" exec="image_transport_decompressor_node" name="image_decompressor_node">
	<remap from="~/input/compressed_image" to="/sensing/camera/traffic_light/image_raw/compressed"/>
	<remap from="~/output/raw_image" to="/sensing/camera/image"/>
  </node>

</launch>
